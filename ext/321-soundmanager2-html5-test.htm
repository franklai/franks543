<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Ext JS 3.2.1 with SoundManager2 HTML5 Edition</title>
<script type="text/javascript" src="/soundmanagerv296a-20100520/script/soundmanager2.js"></script>
<!--
<link rel="StyleSheet" type="text/css" href="http://extjs.cachefly.net/ext-3.2.1/resources/css/ext-all.css">
<script type="text/javascript" src="http://extjs.cachefly.net/ext-3.2.1/adapter/ext/ext-base.js"></script>
<script type="text/javascript" src="http://extjs.cachefly.net/ext-3.2.1/ext-all.js"></script>
-->
<link rel="StyleSheet" type="text/css" href="/ext-3.2.1/resources/css/ext-all.css">
<style type="text/css">
body {
    user-select: text;
    -moz-user-select: text;
    -webkit-user-select: text;
    -khtml-user-select: text;
}
</style>
<script type="text/javascript" src="/ext-3.2.1/adapter/ext/ext-base.js"></script>
<script type="text/javascript" src="/ext-3.2.1/ext-all.js"></script>
<script type="text/javascript">
(function() {
    // soundmanager2 setting
    soundManager.url = '/soundmanagerv296a-20100520/swf/';
    soundManager.useHTML5Audio = true;
    soundManager.flashVersion = 9;
    soundManager.useMovieStar = true;
})();

LOG = function() {
    if (!window.console || !window.console.log) {
        return;
    }

    window.console.log(arguments);
};

Ext.namespace('FrankLai.Player');

FrankLai.Player = Ext.extend(Object, {
    constructor: function() {
        this.songList = [];
        this.songIndex = 0;
        this.id = 'mySound';
        this.obj = null;
    },
    add: function(path) {
        this.songList.push(path);
    },
    play: function(path) {
        this.songList.push(path);
        this.songIndex = this.songList.indexOf(path);
        this.jump(this.songIndex);
    },
    getObj: function(song) {
        var obj = soundManager.getSoundById(song);
        if (obj) {
            return obj;
        }

        obj = soundManager.createSound({
            url: song,
            id: song,
            volume: 50,
            ondataerror: this.onDataError,
            onload: this.onLoad
        });

        return obj;
    },
    jump: function(index) {
        index = index || 0;

        if (this.songList.length <= 0) {
            return;
        }

        var song = this.songList[index];
        if (!song) {
            return;
        }
        if (soundManager.canPlayURL(song)) {
            this.obj = this.getObj(song);
            soundManager.stopAll();
            soundManager.play(song)
        }
    },
    setVolume: function(val) {
        LOG('setVolume:', val);
        if (!this.obj) {
            return;
        }
        this.obj.setVolume(val);
    },

    onDataError: function() {
        LOG('onDataError, ', arguments);
    },
    onLoad: function() {
        LOG('onLoad, ', arguments);
    }

});

Ext.onReady(function(){
    var player = new FrankLai.Player();

	var jsonStore = new Ext.data.JsonStore({
		url: '/js_test/audio/audio.json',
		autoLoad: true,
		root: 'items',
		fields: [
            'path',
			'artist', 'title', 'album', 
			{name: 'track', type: 'int'}, 
			{name: 'duration', type: 'number'}
		]
	});

	var contextMenu = new Ext.menu.Menu({
		plain: true,
		autoDestroy: true,
		items: [{
			xtype: 'menuseparator'
		}, {
			xtype: 'displayfield',
			itemId: 'selected'
		}, {
			xtype: 'menuseparator'
		}]
	});
	
	var colModel = new Ext.grid.ColumnModel({
		defaults: {
			sortable: true
		},
		columns: [
			{header: 'artist', dataIndex: 'artist'},
			{header: 'title', dataIndex: 'title'},
			{header: 'path', dataIndex: 'path'},
			{
                header: 'playable', 
                dataIndex: 'path',
                renderer: function(val) {
                    if (soundManager.canPlayURL(val)) {
                        return '<span style="color: green;">OK</span>';
                    } else {
                        return '<span style="color: red;">NO</span>';
                    }
                }
            }
		]
	});

    var actionPlay = new Ext.Action({
        text: 'Play',
        scope: this,
        handler: function() {
            var grid = Ext.getCmp('myGrid');
            var sm = grid.getSelectionModel();
            var record = sm.getSelected();
            var song = '/js_test/audio/' + record.get('path');
            LOG('song:', song);
            player.play(song);
        }
    });
    var actionStop = new Ext.Action({
        text: 'Stop',
        scope: this,
        handler: function() {
            soundManager.stopAll();
        }
    });
    var actionNext = new Ext.Action({
        text: 'Next'
    });
    var actionPrev = new Ext.Action({
        text: 'Previous'
    });

	var contextMenu = new Ext.menu.Menu({
		plain: true,
		autoDestroy: true,
		items: [actionPlay, actionNext, actionPrev]
	});

    var tbarObj = {
        items: [actionPlay, actionStop, actionNext, actionPrev, {
            xtype: 'slider',
            width: 200,
            value: 50,
            minValue: 0,
            maxValue: 100,
            plugins: new Ext.slider.Tip(),
            listeners: {
                change: {
                    fn: function(slider, newVal, thumb) {
                        LOG('change, newVal:', newVal);
                        player.setVolume(newVal);
                    }
                },
                changecomplete: {
                    fn: function(slider, newVal, thumb) {
                        LOG('changecomplete, newVal:', newVal);
                    }
                }
            }
        }],
    };

	var obj = {
        id: 'myGrid',
		title: 'SoundManager2 HTML5 Edition test',
		viewConfig: {
			forceFit: true
		},

		colModel: colModel,
		store: jsonStore,

        tbar: tbarObj,

		bbar: new Ext.PagingToolbar({
			store: jsonStore
		}),

		listeners: {
            rowdblclick: function(grid, rowIndex, evt) {
                actionPlay.execute();
            },
			rowcontextmenu: function(grid, rowIndex, evt) {
				var sm = grid.getSelectionModel();
				sm.selectRow(rowIndex, sm.isSelected(rowIndex));
				
				var count = sm.getCount();
				contextMenu.showAt(evt.getXY());
			},
			contextmenu: function(evt) {
				evt.preventDefault();
			}
		}
	};
	var panel = new Ext.grid.GridPanel(obj);

    var ct = new Ext.Panel({
        renderTo: 'container',
        border: false,
        height: 300,
        width: 500,
        layout: 'fit',
        items: panel
    });
});
</script>
</head>
<body>
<div id="container" style="width: 500px;">
</div>
<div id="footer" style="font-size: 80%; width: 90%; bottom: 0px; position: fixed; padding: 5px;"><a href="http://franks543.blogspot.com/" target="_blank">Frank的五四三</a></div>
</body>
</html>

